[{"/home/tank/Desktop/todolist/src/index.js":"1","/home/tank/Desktop/todolist/src/reportWebVitals.js":"2","/home/tank/Desktop/todolist/src/App2.js":"3","/home/tank/Desktop/todolist/src/containers2/Login2.js":"4","/home/tank/Desktop/todolist/src/containers2/ToDo2.js":"5","/home/tank/Desktop/todolist/src/containers2/NavBar2.js":"6","/home/tank/Desktop/todolist/src/containers2/Register2.js":"7","/home/tank/Desktop/todolist/src/containers2/Todo.js":"8"},{"size":220,"mtime":1617521722554,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609844380533,"results":"11","hashOfConfig":"10"},{"size":2270,"mtime":1617715426435,"results":"12","hashOfConfig":"10"},{"size":2163,"mtime":1617715143912,"results":"13","hashOfConfig":"10"},{"size":5879,"mtime":1617652116257,"results":"14","hashOfConfig":"10"},{"size":617,"mtime":1616229234791,"results":"15","hashOfConfig":"10"},{"size":2435,"mtime":1617386843217,"results":"16","hashOfConfig":"10"},{"size":5562,"mtime":1617715935985,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"njpzjs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tank/Desktop/todolist/src/index.js",[],["37","38"],"/home/tank/Desktop/todolist/src/reportWebVitals.js",[],["39","40"],"/home/tank/Desktop/todolist/src/App2.js",["41"],"/home/tank/Desktop/todolist/src/containers2/Login2.js",[],"/home/tank/Desktop/todolist/src/containers2/ToDo2.js",["42"],"import './App2.css';\nimport React from'react';\n\nimport { AuthContext } from '../App2'\n\n\n\n\nconst initialState={userInput:\"\",toDoList:[],vis:[],\n      greentick: []}\n\nfunction inputValidator(arr){\n  var Regex=/^[a-zA-Z0-9_]+$/g\n  var result=arr.some(e=> Regex.test(e));\n  return result\n}\n\n\n\n\n  \nfunction TimePicker(props){\n  var curr = new Date();\n  //var t = curr.toISOString(); this doesnt account for BST/GMT +1!!\n  //I changed it to LocaleTimeString as below\n  var t=curr.toLocaleTimeString()\n  return(\n    <div className=\"timeSelect\"><label>Set Time:</label>\n    <input type=\"time\" id=\"appt\" name=\"appt\"\n       min=\"00:00\" max=\"23:59\" onChange={props.onChange} defaultValue={t.slice(0,5)} required></input></div>)\n}\n\nfunction Calendar(props){\n  \n  var curr = new Date();\n  var dt = curr.toISOString().substr(0,10);\n  var tt=curr.toLocaleTimeString().slice(0,5);\n  let [timeline,setTime]= React.useState({date:dt, time:tt, todo:props.item});\n  \n function handleTime(e){\n   const newObj={time:e.target.value}\n   setTime(oldObj=>{\n     return {...oldObj,...newObj}\n    })\n }\n  \n function handleDate(e){\n    const newObj={date: e.target.value}\n    setTime(oldObj=>{\n      return {...oldObj,...newObj}\n    })\n  }\n  return(<div className={props.style2||props.style}>\n      <label >Enter deadline:</label>\n  <input type=\"date\" id=\"start\" onChange={(e)=>handleDate(e)} defaultValue={dt} name=\"trip-start\"\n       \n    min=\"2020-01-01\" max=\"2021-12-31\"></input><TimePicker onChange={(e)=>handleTime(e)} /><button className={props.submitStyle} onClick={props.onClick} value={JSON.stringify(timeline)}>Set Reminder</button></div>)\n  \n}\n\n\n\nclass MyToDoList extends React.Component {\n  //static contextType= AuthContext;\n  \n  \n  \n  \n  constructor(props) {\n    super(props);\n    // change code below this line\n    \n    this.state={\n      userInput:\"\",\n      toDoList:[],\n      serverList:[],\n      vis:[],\n      greentick:[]\n    }\n    \n\n    \n\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.clear=this.clear.bind(this)\n    this.updateItem=this.updateItem.bind(this);\n    this.submitToServer=this.submitToServer.bind(this);\n    this.removeReminder=this.removeReminder.bind(this);\n  }\n\n  \n\n  componentDidMount(){\n    console.log(this.context,this.context.length)\n    console.log(AuthContext)\n  }\n  clear(){\n    this.setState(initialState)\n  }\n\n\n  removeReminder(e){\n    this.state.serverList.splice(e,1);\n    this.setState({\n      serverList: this.state.serverList\n    })\n  }\n  updateItem(e, index){\n    this.state.toDoList.splice(e,1);\n    this.setState({\n      toDoList: this.state.toDoList\n    })\n  }\n  setTime(e){\n    this.state.vis.splice(e,1,!this.state.vis[e])\n    this.setState({\n      vis: this.state.vis\n    })\n    \n  }\n  \n  handleSubmit() {\n    \n    const itemsArray = this.state.userInput.split(',');\n    if(itemsArray[itemsArray.length-1]===\"\") itemsArray.pop()\n    let visi=[]\n    for (let i=0;i<itemsArray.length;i++){\n      visi.push(true);\n      this.state.greentick.push(false)\n    }\n    this.setState({\n      toDoList: itemsArray,\n      vis: visi\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  \n  submitToServer(e,index){\n    \n    let obj=JSON.parse(e.target.value)\n    console.log(e,index)\n    this.state.greentick.splice(index,1,!this.state.greentick[index])\n    this.setState({\n      serverList: [...this.state.serverList,Object(e.target.value)],\n      //greentick: this.state.greentick\n      \n    })\n    \n    let newObj= {...this.props.user};\n    newObj.log.push(obj)\n\n\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({data: newObj})\n  }\n\n    fetch('http://localhost:3001/addTodo', requestOptions)\n       .then(res=> res.json())\n       //.then(resJSON=>dispatch({type: \"SETREMINDER\", payload: resJSON}))\n    \n  }\n  render() {\n    console.log(this.props.user)\n    const items2=this.state.serverList.map((d,i)=><li key={i}>{d}<span className=\"close\" onClick={()=>this.removeReminder(i)} >X</span></li>) //Changed the Key from Math.Random??\n    const items3= this.props.user.log.map((d,i)=><li key={i}>{`Task:${d.todo}, date: ${d.date}, time:${d.time}`}<span className=\"close\" onClick={()=>this.removeReminder(i)} >X<span class=\"tooltiptext\">Delete Reminder</span></span></li>)\n    const items = !inputValidator(this.state.toDoList)&&this.state.toDoList.length===0?<h1>Enter some valid tasks separated by commas</h1>:this.state.toDoList.map((d,index)=>d===\"\"?null:<div key={index}><li className=\"btn1\" key={index}>{d}<span onClick={()=>this.setTime(index)} className={this.state.greentick[index]?\"clock2\":\"clock\"}>&#128337;</span><span className={this.state.greentick[index]?\"greenTick1\":\"greenTick2\"}>&#9989;</span></li><Calendar onClick={(e)=>{this.submitToServer(e,index)}} item={d} style={this.state.vis[index]?\"calendar1\":\"calendar2\"} style2={this.state.greentick[index]?\"calendar2\":\"calendar1\"} submitStyle={this.state.greentick[index]?\"submitted\":\"notsubmitted\"}/></div>)\n    return (\n      <div>\n        <h1 id=\"box\">Hello {this.props.user.username} <br></br>Your \"To Do\" List:</h1>\n        <div id=\"readyToPlan\"><h2>You will be emailed the following reminders:</h2><ul>{items3}</ul></div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          \n          placeholder='Separate Tasks With Commas'\n        />\n        <br />\n        <button id=\"createList\" onClick={this.handleSubmit}>Create List</button>\n        <button id=\"clearList\" onClick={this.clear}>Clear List</button>\n        <div id=\"card\"><ul>{items}</ul></div>\n        \n                                      \n                       \n      </div>\n    );\n  }\n}\n//MyToDoList.contextType= AuthContext\n\n\nexport default MyToDoList;","/home/tank/Desktop/todolist/src/containers2/NavBar2.js",[],"/home/tank/Desktop/todolist/src/containers2/Register2.js",[],"/home/tank/Desktop/todolist/src/containers2/Todo.js",["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"49"},{"ruleId":"47","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":173,"column":11,"nodeType":"53","messageId":"54","endLine":173,"endColumn":17},{"ruleId":"51","severity":1,"message":"56","line":14,"column":10,"nodeType":"53","messageId":"54","endLine":14,"endColumn":24},{"ruleId":"51","severity":1,"message":"57","line":67,"column":14,"nodeType":"53","messageId":"54","endLine":67,"endColumn":22},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"no-unused-vars","'MyToDoList' is defined but never used.","Identifier","unusedVar","'items2' is assigned a value but never used.","'inputValidator' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]