[{"/home/tank/Desktop/todolist/src/index.js":"1","/home/tank/Desktop/todolist/src/reportWebVitals.js":"2","/home/tank/Desktop/todolist/src/App.js":"3","/home/tank/Desktop/todolist/src/containers/Login.js":"4","/home/tank/Desktop/todolist/src/containers/NavBar.js":"5","/home/tank/Desktop/todolist/src/containers/Register.js":"6","/home/tank/Desktop/todolist/src/containers/Todo.js":"7"},{"size":220,"mtime":1617949971371,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1609844380533,"results":"10","hashOfConfig":"9"},{"size":2451,"mtime":1618134001293,"results":"11","hashOfConfig":"9"},{"size":2202,"mtime":1618157317966,"results":"12","hashOfConfig":"9"},{"size":615,"mtime":1617950412233,"results":"13","hashOfConfig":"9"},{"size":2482,"mtime":1618214199404,"results":"14","hashOfConfig":"9"},{"size":7302,"mtime":1618390050990,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"njpzjs",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/home/tank/Desktop/todolist/src/index.js",[],["33","34"],"/home/tank/Desktop/todolist/src/reportWebVitals.js",[],["35","36"],"/home/tank/Desktop/todolist/src/App.js",[],"/home/tank/Desktop/todolist/src/containers/Login.js",[],"/home/tank/Desktop/todolist/src/containers/NavBar.js",[],"/home/tank/Desktop/todolist/src/containers/Register.js",[],"/home/tank/Desktop/todolist/src/containers/Todo.js",["37","38"],"//This is the functional component definition \n//Its needed in order to use react hooks \nimport './App.css';\nimport React from 'react';\n\nimport { AuthContext } from '../App'\n\n\n\n\nconst initialState = {\n  userInput: \"\", toDoList: [], vis: [],\n  greentick: []\n}\n\nfunction inputValidator(arr) {\n  var Regex = /^[a-zA-Z0-9_]+$/g\n  var result = arr.some(e => Regex.test(e));\n  return result\n}\n\n\n\n\n\nfunction TimePicker(props) {\n  var curr = new Date();\n  //var t = curr.toISOString(); this doesnt account for BST/GMT +1!!\n  //I changed it to LocaleTimeString as below\n  var t = curr.toLocaleTimeString()\n  return (\n    <div className=\"timeSelect\"><label>Set Time:</label>\n      <input type=\"time\" id=\"appt\" name=\"appt\"\n         onChange={props.onChange} defaultValue={t.slice(0, 5)} required></input></div>)\n}\n\nfunction Calendar(props) {\n\n  var curr = new Date();\n  var dt = curr.toISOString().substr(0, 10);\n  var tt = curr.toLocaleTimeString().slice(0, 5);\n  let [timeline, setTime] = React.useState({ date: dt, time: tt, todo: props.item });\n\n  function handleTime(e) {\n    const newObj = { time: e.target.value }\n    console.log(newObj)\n    setTime(oldObj => {\n      return { ...oldObj, ...newObj }\n    })\n  }\n\n  function handleDate(e) {\n    const newObj = { date: e.target.value }\n    setTime(oldObj => {\n      return { ...oldObj, ...newObj }\n    })\n  }\n  return (<div className={props.style2 || props.style}>\n    <label >Enter deadline:</label>\n    <input type=\"date\" id=\"start\" onChange={(e) => handleDate(e)} defaultValue={dt} name=\"trip-start\"\n\n      min=\"2020-01-01\" max=\"2021-12-31\"></input><TimePicker onChange={(e) => handleTime(e)} /><button className={props.submitStyle} onClick={props.onClick} value={JSON.stringify(timeline)}>Set Reminder</button></div>)\n\n}\n\n\n\nfunction MyToDoComp(props) {\n  const [AppState, setParams] = React.useState({ userInput: \"\", toDoList: [], serverList: [], vis: [], greentick: [] });\n  const { dispatch } = React.useContext(AuthContext);\n\n\n  function updateCentralState() {\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ data: props.user })\n    }\n\n    fetch('http://localhost:3001/updateCentralState', requestOptions)\n      .then(res => { return res.json() })\n      .then(resJSON => dispatch({ type: \"UPDATECENTRALSTATE\", payload: resJSON }))\n  }\n\n  React.useEffect(() => {\n    let i = 0;\n    //const interval=setInterval(()=>{i++;console.log(i)},1000);\n    const interval = setInterval(() => {\n      updateCentralState();\n    }, 30000)\n\n\n  })\n\n\n  function clear() {\n    setParams(old => { return { ...old, ...initialState } })\n  }\n\n  function setTime(e) {\n    AppState.vis.splice(e, 1, !AppState.vis[e])\n    setParams(old => {\n      return { ...old, ...AppState.vis }\n    })\n\n  }\n\n  function handleSubmit() {\n\n    const itemsArray = AppState.userInput.split(',');\n    if (itemsArray[itemsArray.length - 1] === \"\") itemsArray.pop()\n    let visi = []\n    for (let i = 0; i < itemsArray.length; i++) {\n      visi.push(true);\n      AppState.greentick.push(false)\n    }\n    let newObj = { toDoList: itemsArray, vis: visi }\n    setParams(old => {\n      return { ...old, ...newObj }\n\n    })\n\n  }\n  function handleChange(e) {\n    let newO = { userInput: e.target.value }\n    console.log(newO)\n    setParams(old => {\n      return { ...old, ...newO }\n    });\n    console.log(AppState)\n  }\n  function removeOverdue(i) {\n    console.log(AppState)\n    let newObj = { ...props.user }\n    let item = newObj.overdue.splice(i, 1)\n    console.log(item)\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ data: newObj, Item: item })\n    }\n\n    fetch('http://localhost:3001/removeOverdue', requestOptions)\n      .then(res => { return res.json() })\n      .then(resJSON => dispatch({ type: \"SETREMINDER\", payload: resJSON }))\n  }\n\n\n  function removeReminder(i) {\n    console.log(AppState)\n    let newObj = { ...props.user }\n    let item = newObj.log.splice(i, 1)\n    console.log(item)\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ data: newObj, Item: item })\n    }\n\n    fetch('http://localhost:3001/removeTodo', requestOptions)\n      .then(res => { return res.json() })\n      //.then(resJSON=>console.log(resJSON))\n      .then(resJSON => dispatch({ type: \"SETREMINDER\", payload: resJSON }))\n  }\n\n  function submitToServer(e, index) {\n    let obj = JSON.parse(e.target.value)\n    console.log(e, index)\n    AppState.greentick.splice(index, 1, !AppState.greentick[index])\n    setParams(old => {\n      console.log(old, obj)\n      console.log({ ...old, obj })\n\n      return { ...old, obj }\n    })\n\n\n\n    let newObj = { ...props.user };\n    newObj.log.push(obj)\n\n\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ data: newObj })\n    }\n\n    fetch('http://localhost:3001/addTodo', requestOptions)\n      .then(res => { return res.json() })\n      //.then(resJSON=>console.log(resJSON))\n      .then(resJSON => dispatch({ type: \"SETREMINDER\", payload: resJSON }))\n\n  }\n\n\n  console.log(props.user)\n  const items2 = props.user.overdue.map((d, i) => <li key={i}>{`Task:${d.todo}, date: ${d.date}, time:${d.time}`}<span className=\"close\" onClick={() => removeOverdue(i)} >X<span class=\"tooltiptext\">Delete Reminder?</span></span></li>)\n  const items3 = props.user.log.map((d, i) => <li key={i}>{`Task:${d.todo}, date: ${d.date}, time:${d.time}`}<span className=\"close\" onClick={() => removeReminder(i)} >X<span class=\"tooltiptext\">Delete Reminder?</span></span></li>)\n  const items = !inputValidator(AppState.toDoList) && AppState.toDoList.length === 0 ? <h1>Enter some valid tasks separated by commas</h1> : AppState.toDoList.map((d, index) => d === \"\" ? null : <div key={index}><li className=\"btn1\" key={index}>{d}<span onClick={() => setTime(index)} className={AppState.greentick[index] ? \"clock2\" : \"clock\"}>&#128337;</span><span className={AppState.greentick[index] ? \"greenTick1\" : \"greenTick2\"}>&#9989;</span></li><Calendar onClick={(e) => { submitToServer(e, index) }} item={d} style={AppState.vis[index] ? \"calendar1\" : \"calendar2\"} style2={AppState.greentick[index] ? \"calendar2\" : \"calendar1\"} submitStyle={AppState.greentick[index] ? \"submitted\" : \"notsubmitted\"} /></div>)\n  return (\n\n    <div>\n      <h1 id=\"box\">Hello {props.user.username} <br></br>Your \"To Do\" List:</h1>\n      <div className=\"CssFlex\">\n      <div id=\"overdue\"><h2>Your overdue Tasks:</h2><ul>{items2}</ul></div>\n      <div id=\"readyToPlan\"><h2>You will be emailed the following reminders:</h2><ul>{items3}</ul></div>\n      </div>\n      <div id=\"textArea\">\n      <textarea\n        onChange={(e) => handleChange(e)}\n        value={AppState.userInput}\n\n        placeholder='Separate Tasks With Commas'\n      />\n      <br />\n      <button id=\"createList\" onClick={() => handleSubmit()}>Create List</button>\n      <button id=\"clearList\" onClick={() => clear()}>Clear List</button>\n      </div>\n      <div id=\"card\"><ul>{items}</ul></div>\n\n\n\n    </div>\n  );\n}\n\n\n\nexport default MyToDoComp;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":87,"column":9,"nodeType":"47","messageId":"48","endLine":87,"endColumn":10},{"ruleId":"45","severity":1,"message":"49","line":89,"column":11,"nodeType":"47","messageId":"48","endLine":89,"endColumn":19},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],["50"],["51"],"no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar","'interval' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]